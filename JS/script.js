const menuIcon = document.querySelector('.menu-icon');const sidebar = document.getElementById('mySidebar');const closeBtn = document.getElementById('closeBtn');const backdrop = document.getElementById('backdrop');const navLinks = document.querySelectorAll('.nav-links a');const switchBtn = document.getElementById("langSwitch");const box = document.getElementById('box');const preloader = document.getElementById('preloader');const titles = document.querySelectorAll('.title');const sections = document.querySelectorAll('.section');window.addEventListener('load', () => {  const preloader = document.getElementById('preloader');  if (preloader) {    document.body.classList.add('loading');     setTimeout(() => {      preloader.classList.add('hidden');     }, 290);     preloader.addEventListener('transitionend', () => {      preloader.style.display = 'none';      document.body.classList.remove('loading');      window.scrollTo(0, 0);    }, { once: true });  }});menuIcon.addEventListener('click', () => {  sidebar.classList.add('active');  backdrop.classList.add('active');  sidebar.setAttribute('aria-hidden', 'false');});closeBtn.addEventListener('click', () => {  sidebar.classList.remove('active');  backdrop.classList.remove('active');  sidebar.setAttribute('aria-hidden', 'true');});backdrop.addEventListener('click', () => {  sidebar.classList.remove('active');  backdrop.classList.remove('active');  sidebar.setAttribute('aria-hidden', 'true');});navLinks.forEach(link => {  link.addEventListener('mouseenter', () => link.classList.add('hovered'));  link.addEventListener('mouseleave', () => link.classList.remove('hovered'));});let currentLang = localStorage.getItem("lang") || "fr";document.querySelectorAll("[data-fr]").forEach(el => {  el.textContent = el.getAttribute(`data-${currentLang}`);});document.documentElement.setAttribute("lang", currentLang);switchBtn.textContent = currentLang.toUpperCase();switchBtn.addEventListener("click", () => {  currentLang = currentLang === "fr" ? "en" : "fr";  localStorage.setItem("lang", currentLang);  switchBtn.textContent = currentLang.toUpperCase();  document.querySelectorAll("[data-fr]").forEach(el => {    el.textContent = el.getAttribute(`data-${currentLang}`);  });  document.documentElement.setAttribute("lang", currentLang);});function scrollToTop() {  const startY = window.pageYOffset;  const duration = 1200;   let startTime = null;  function easeInOutQuad(t, b, c, d) {    t /= d / 2;    if (t < 1) return c / 2 * t * t + b;    t--;    return -c / 2 * (t * (t - 2) - 1) + b;  }  function animateScroll(currentTime) {    if (!startTime) startTime = currentTime;    const timeElapsed = currentTime - startTime;    const nextPosition = easeInOutQuad(timeElapsed, startY, -startY, duration);    window.scrollTo(0, nextPosition);    if (timeElapsed < duration) requestAnimationFrame(animateScroll);  }  requestAnimationFrame(animateScroll);}if (box) {  box.addEventListener('click', function () {    const screenHeight = window.innerHeight;    const startY = window.pageYOffset;    const targetY = startY + screenHeight;    const distance = targetY - startY;    const duration = 1500;    let start = null;    window.requestAnimationFrame(function step(timestamp) {      if (!start) start = timestamp;      const progress = timestamp - start;      window.scrollTo(0, easeInOutQuad(progress, startY, distance, duration));      if (progress < duration) {        window.requestAnimationFrame(step);      }    });    function easeInOutQuad(t, b, c, d) {      t /= d / 2;      if (t < 1) return c / 2 * t * t + b;      t--;      return -c / 2 * (t * (t - 2) - 1) + b;    }  });  window.addEventListener('scroll', function () {    if (window.scrollY < 100) {      box.style.display = 'block';    } else {      box.style.display = 'none';    }  });}function updateTitle() {  sections.forEach((section, index) => {    const rect = section.getBoundingClientRect();    if (rect.top <= window.innerHeight / 2 && rect.bottom >= window.innerHeight / 2) {      titles.forEach(title => title.classList.add('hidden'));      titles[index].classList.remove('hidden');    }  });}window.addEventListener('scroll', updateTitle);window.addEventListener('load', updateTitle);const blocs = document.querySelectorAll('.formation_left, .formation_right');const observer = new IntersectionObserver((entries) => {  entries.forEach(entry => {    if (entry.isIntersecting) {      entry.target.classList.add('visible');    }  });}, { threshold: 0.2 });blocs.forEach(bloc => observer.observe(bloc));const navLinksSidebar = document.querySelectorAll('.nav-links a');navLinksSidebar.forEach(link => {  link.addEventListener('click', () => {    sidebar.classList.remove('active');    backdrop.classList.remove('active');    sidebar.setAttribute('aria-hidden', 'true');  });});document.querySelectorAll('.nav-links a').forEach(anchor => {  anchor.addEventListener('click', function (e) {    e.preventDefault();    const targetId = this.getAttribute('href');    const target = document.querySelector(targetId);    if (target) {      const startY = window.pageYOffset;      const targetY = target.getBoundingClientRect().top + startY;      const duration = 1200;      let startTime = null;      function easeInOutQuad(t, b, c, d) {        t /= d / 2;        if (t < 1) return c / 2 * t * t + b;        t--;        return -c / 2 * (t * (t - 2) - 1) + b;      }      function scrollAnimation(currentTime) {        if (!startTime) startTime = currentTime;        const timeElapsed = currentTime - startTime;        const nextStep = easeInOutQuad(timeElapsed, startY, targetY - startY, duration);        window.scrollTo(0, nextStep);        if (timeElapsed < duration) requestAnimationFrame(scrollAnimation);      }      requestAnimationFrame(scrollAnimation);    }    sidebar.classList.remove('active');    backdrop.classList.remove('active');    sidebar.setAttribute('aria-hidden', 'true');  });});const track = document.querySelector('.carousel-track');const items = Array.from(track.children);const centralInfo = document.getElementById('centralInfo');const clickTexts = document.querySelectorAll('.cliquez');items.forEach(item => {    const clone = item.cloneNode(true);    track.appendChild(clone);});let position = 0;const speed = 0.5;let paused = false;function loop() {    if (!paused) {        position -= speed;        const totalWidth = track.scrollWidth / 2;        if (Math.abs(position) >= totalWidth) position = 0;        track.style.transform = `translateX(${position}px)`;    }    requestAnimationFrame(loop);}loop();function toggleCentralInfo(item) {    const videoSrc = item.querySelector('video').getAttribute('src');    function buildContent() {        const text = item.getAttribute(`data-${currentLang}2`);        const listItems = text.split(' - ').filter(t => t.trim() !== "");        const htmlList = '<ul>' + listItems.map(li => `<li>${li.trim()}</li>`).join('') + '</ul>';        return `            <div class="central-video-text">                <video src="${videoSrc}" autoplay muted loop playsinline ></video>                <div class="central-text">${htmlList}</div>            </div>        `;    }    const htmlContent = buildContent();    if (centralInfo.classList.contains('active') && centralInfo.innerHTML === htmlContent) {        centralInfo.classList.remove('active');        setTimeout(() => {            centralInfo.style.display = 'none';        }, 400);        paused = false;    } else {        paused = true;        centralInfo.innerHTML = htmlContent;        centralInfo.style.display = 'flex';        requestAnimationFrame(() => centralInfo.classList.add('active'));        clickTexts.forEach(p => p.textContent = (currentLang === 'fr')            ? "Cliquez sur le texte pour revenir au carrousel"            : "Click on the text to return to the carousel");        switchBtn.addEventListener('click', () => {            if (centralInfo.classList.contains('active')) {                centralInfo.innerHTML = buildContent();            }        });    }}const competenceItems = document.querySelectorAll('.competence-video'); competenceItems.forEach(item => {         const overlay = item.querySelector('.click-overlay');         const title = item.querySelector('.competence-title');          overlay.addEventListener('click', () => toggleCentralInfo(item));         title.addEventListener('click', () => toggleCentralInfo(item)); });centralInfo.addEventListener('click', () => {    centralInfo.classList.remove('active');    setTimeout(() => {        centralInfo.style.display = 'none';    }, 400);    paused = false;    clickTexts.forEach(p => p.textContent = "Cliquez sur les images Ã  droite pour en savoir plus");});const cards = document.querySelectorAll('.card');cards.forEach(card => {  card.addEventListener('click', () => {    const modalId = card.dataset.modal;     const modal = document.getElementById(modalId);    openModal(modal);  });});function openModal(modal) {  modal.classList.add('show');  modal.dataset.scrollStart = window.scrollY; }function closeModal(modal) {  modal.classList.remove('show');}document.querySelectorAll('.modal .close').forEach(btn => {  btn.addEventListener('click', () => {    closeModal(btn.closest('.modal'));  });});window.addEventListener('click', event => {  if (event.target.classList.contains('modal')) {    closeModal(event.target);  }});window.addEventListener('scroll', () => {  document.querySelectorAll('.modal.show').forEach(modal => {    const scrollStart = parseFloat(modal.dataset.scrollStart);    if (Math.abs(window.scrollY - scrollStart) > 50) {      closeModal(modal);    }  });});document.addEventListener("DOMContentLoaded", () => {  const videos = document.querySelectorAll("video.lazy");  const observer = new IntersectionObserver((entries, obs) => {    entries.forEach(entry => {      if (entry.isIntersecting) {        const video = entry.target;        video.play();        obs.unobserve(video);       }    });  }, { threshold: 0.25 });   videos.forEach(video => {    video.pause();            observer.observe(video);  });});